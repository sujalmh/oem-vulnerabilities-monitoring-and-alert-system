import React, { useState, useEffect } from "react";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import { Pie } from "react-chartjs-2";
import axiosInstance from "../../axios";

// Register components
ChartJS.register(ArcElement, Tooltip, Legend);
const VulnerabilityPie = () => {
  const [data, setData] = useState({
    labels: ["IT Systems", "OT Systems"],
    datasets: [
      {
        data: [0, 0], // default values, will be updated after data fetch
        backgroundColor: ["#36a2eb", "#ff6384"],
      },
    ],
  });

  const [error, setError] = useState(null); // State to handle errors
  useEffect(() => {
    // Fetch the data from the Flask backend
    axiosInstance
      .get("/api/get_it_ot_number")
      .then((response) => {
        const { it_count, ot_count } = response.data;
        console.log("IT/OT count data:", it_count, ot_count);
        // Update chart data after successful response
        setData({
          labels: ["IT Systems", "OT Systems"],
          datasets: [
            {
              data: [it_count, ot_count],
              backgroundColor: ["#36a2eb", "#ff6384"],
            },
          ],
        });
      })
      .catch((error) => {
        console.error("Error fetching IT/OT count data:", error);
        setError("Failed to load data. Please try again later."); // Handle error
      });
  }, []);

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: "right",
      },
    },
  };

  return (
    <div className="bg-white h-full shadow rounded-lg py-4 px-4">
      {/* Conditional rendering for error message */}
      {error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <Pie data={data} options={options} />
      )}
    </div>
  );
};

export default VulnerabilityPie;
